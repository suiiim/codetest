"""
n(2 ≤ n ≤ 100)개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 m(1 ≤ m ≤ 100,000)개의 버스가 있다. 각 버스는 한 번
사용할 때 필요한 비용이 있다. 모든 도시의 쌍 (A, B)에 대해서 도시 A에서 B로 가는데 필요한 비용의 최솟값을 구하는 프로그램을 작성하시오.

첫째 줄에 도시의 개수 n이 주어지고 둘째 줄에는 버스의 개수 m이 주어진다. 그리고 셋째 줄부터 m+2줄까지 다음과 같은 버스의 정보가 주어진다.
먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 버스의 정보는 버스의 시작 도시 a, 도착 도시 b, 한 번 타는데 필요한 비용 c로 이루어져
있다. 시작 도시와 도착 도시가 같은 경우는 없다. 비용은 100,000보다 작거나 같은 자연수이다. 시작 도시와 도착 도시를 연결하는 노선은 하나가
아닐 수 있다.

n개의 줄을 출력해야 한다. i번째 줄에 출력하는 j번째 숫자는 도시 i에서 j로 가는데 필요한 최소 비용이다. 만약, i에서 j로 갈 수 없는 경우에는
그 자리에 0을 출력한다.

5
14
1 2 2
1 3 3
1 4 1
1 5 10
2 4 2
3 4 1
3 5 1
4 5 3
3 5 10
3 1 8
1 4 2
5 1 7
3 4 2
5 2 4
# 0 2 3 1 4
# 12 0 15 2 5
# 8 5 0 1 1
# 10 7 13 0 3
# 7 4 10 6 0

2
1
1 2 1
# 0 1
# 0 0


플로이드 워셜 알고리즘 (Floyd-Warshall Algorithm)
- 모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구하는 알고리즘
- Dab = min(Dab, Dak + Dkb)
1. 그래프의 노드와 간선에 따라 최단 거리 테이블을 갱신
2. 1번 노드를 거쳐 가는 경우를 고려하여 테이블을 갱신
3. 2번 노드를 거쳐 가는 경우를 고려하여 테이블을 갱신
4. 3번, 4번, ... 노드를 거쳐 가는 경우를 고려하여 테이블을 갱신
"""
import sys

input = sys.stdin.readline


# Memory 31120 KB
# Time 456 ms
def solution():
    n = int(input())
    m = int(input())
    graph = [[float('inf')] * n for _ in range(n)]

    for _ in range(m):
        a, b, c = map(int, input().split())
        graph[a - 1][b - 1] = min(c, graph[a - 1][b - 1])

    for k in range(n):
        for i in range(n):
            if i == k:
                continue
            for j in range(n):
                if j not in (i, k):
                    graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])

    for row in graph:
        for r in row:
            if r == float('inf'):
                print(0, end=' ')
            else:
                print(r, end=' ')
        print()


solution()


# MEMORY 32140 KB
# TIME 204 ms
def solution1():
    """Solution code for "BOJ 11404. 플로이드".

    - Problem link: https://www.acmicpc.net/problem/11404
    - Solution link: http://www.teferi.net/ps/problems/boj/11404

    (This code was generated by Import Inliner v1.1)
    """

    INF = float('inf')

    # >>> Lines added by Import Inliner <<<
    # - teflib.graph.all_pairs_shortest_paths [v1.1] (copied from teflib/graph.py)
    def all_pairs_shortest_paths(matgraph):
        """Returns a matrix of minimum distances between every pair of vertices."""
        dists = [list(row) for row in matgraph]
        for i, dists_i in enumerate(dists):
            dists_i[i] = 0
        n = len(dists)
        for k, dists_k in enumerate(dists):
            for dists_i in dists:
                dists_ik = dists_i[k]
                for j in range(n):
                    if dists_ik + dists_k[j] < dists_i[j]:
                        dists_i[j] = dists_ik + dists_k[j]
        return dists

    # >>> Lines from original source code <<<
    n = int(sys.stdin.readline())
    m = int(sys.stdin.readline())
    mat_graph = [[INF] * n for _ in range(n)]
    for _ in range(m):
        a, b, c = [int(x) for x in sys.stdin.readline().split()]
        if c < mat_graph[a - 1][b - 1]:
            mat_graph[a - 1][b - 1] = c

    dist_mat = all_pairs_shortest_paths(mat_graph)

    for l in dist_mat:
        print(*(0 if x == INF else x for x in l))


solution1()
